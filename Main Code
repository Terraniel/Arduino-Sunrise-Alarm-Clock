// Sunrise/sunset Clock with display and 5 button control
//Hardware: Arduino Uno, DS3231 I2C RTC, 128x32 display with I2C, 5 buttons (NO, momentary), 3 LED mosfets (currently IRF520N, but should upgrade to IRLZ44N), RGB leds (or discrete). 
//future updates may include changes to the lighting output functions in order to accomodate RED, Warm White and Cool White LEDs for better sunrise simulation.
//Dan Bouchard 13 Jan 2023

//clock and timing libraries required
#include <DS3232RTC.h>
#include <Wire.h>
#include <time.h>
//Screen Libraries required
#include <Arduino.h>
#include <U8x8lib.h>
#include <EEPROM.h>

//creating real time clock object
DS3232RTC myRTC;

//initializing screen
//U8X8_SH1106_128X32_VISIONOX_HW_I2C u8x8(/* reset=*/ U8X8_PIN_NONE); //UNO
U8X8_SSD1306_128X32_UNIVISION_HW_I2C u8x8(/* reset=*/ U8X8_PIN_NONE); //NANO

//pins assignments
const int snoozePin = 2;
const int menuPin = 3;
const int upPin = 4;
const int downPin = 5;
const int enterPin = 6;
const int LEDRed = 9;
const int LEDGreen = 10;
const int LEDBlue = 11;
//led variables
const int redMax = 255;
const int greenMax = 100;
const int blueMax = 80;
bool lightOn = false;
//sunset, and sunset variables
const int sunMax = 149;

int sunriseHour = 8;
int sunriseMinute = 0;
int sunriseLength = 60;
bool sunRising;
int sunsetHour = 21;
int sunsetMinute = 40;
float sunTime = 0;
int sunsetLength = 60;
bool sunSetting;
unsigned long sunMilliTimer = 0;
//button, menu, and clock variables
bool snoozing = false;
int BPSnooze;
int BPMenu;
int BPUp;
int BPDown;
int BPEnter;
bool BUSnooze = false;
bool BUMenu = false;
bool BUUp = false;
bool BUDown = false;
bool BUEnter = false;
bool menuMode = false;
unsigned long timeoutTimer = 0;
int timeoutTime = 10000;
int clockWrite = 0;
int menuIndex = 0;
char time12[8] = "";
char time24[6] = "";
char date[12] = "";
bool ampmN24h = true;
//creating a button class to handle debounce and long press functions
class Button {
  private:
    const int debounceTimer = 10;
    const int longPressTimer = 1000;
    int btnPin = -1;
    int btnState;
    int lastBtnState;
    unsigned long pressStartTime = 0;
    bool latch = false;
  
    //Possible button states
  public: typedef enum ButtonStates {
    btnNotPressed,
    btnInDebounce,
    btnStartPressed,
    btnPressed,
    btnLongPressed
  };
  //button constructor
  Button(int pin) {
    btnPin = pin;
    pinMode(btnPin, INPUT);
    btnState = btnNotPressed;
    lastBtnState = btnNotPressed;
  }
  //button call back, for debounce and long press test
  void btnCallBack(void) {
    int pressed = digitalRead(btnPin);
    if (pressed == HIGH && btnState == btnNotPressed) {
      pressStartTime = millis();
      btnState = btnInDebounce;
    } else switch(btnState) {
      case btnInDebounce: //debounce timer currently disabled
        if ((millis() - pressStartTime) >= debounceTimer && pressed == HIGH) {
          btnState = btnStartPressed;
        }
        break;
      case btnStartPressed://starts counting for long press. a shorter release results in a short press
        if ((millis()-pressStartTime) >= longPressTimer && pressed == HIGH) {
          btnState = btnLongPressed;
        } else if ((millis()-pressStartTime) < longPressTimer && pressed == LOW) {
          btnState = btnPressed;
        }        
        break;
      case btnLongPressed:
        if (pressed == LOW) {
          btnState = btnNotPressed;
        }
        break;
      case btnPressed:
        if (pressed == LOW) {
          btnState = btnNotPressed;
        }
    }
  }
  // Returns only changed state outputs, otherwise gives btnNotPressed
  int btnOutput(void) {
    if (btnState != lastBtnState || btnState == btnLongPressed) {
      lastBtnState = btnState;
      if (btnState == btnNotPressed) latch = false; 
      return btnState;
    } else if (btnState == btnNotPressed) {
      latch = false;
      return btnNotPressed;
    }
  }
  void btnLatch(bool L) {
    latch = L;
  }
  //for comparison and latching purposes
  bool btnLatchOutput(void) {
    return latch;
  }
};
//buttons to be initialized
Button menuBtn(menuPin);
Button enterBtn(enterPin);
Button upBtn(upPin);
Button downBtn(downPin);
Button snoozeBtn(snoozePin);
//setup runs at startup.
void setup() {
  u8x8.begin();
  pinMode(LEDRed, OUTPUT);
  pinMode(LEDGreen, OUTPUT);
  pinMode(LEDBlue, OUTPUT);
  myRTC.begin();
  setSyncProvider(myRTC.get);
  //timeInit will set RTC to last compiled time in event of power loss
  //good for testing and initial setup, not for time recovery in situ
  //timeInit();
  if (EEPROM.read(1) != 255) sunriseHour = EEPROM.read(1);
  if (EEPROM.read(2) != 255) sunriseMinute = EEPROM.read(2);
  if (EEPROM.read(3) != 255) sunriseLength = EEPROM.read(3);
  if (EEPROM.read(4) != 255) sunsetHour = EEPROM.read(4);
  if (EEPROM.read(5) != 255) sunsetMinute = EEPROM.read(5);
  if (EEPROM.read(6) != 255) sunsetLength = EEPROM.read(6);
}
//main loop - keeps track of button presses, calls sunrise and sunset checks
void loop() {
  time_t currentTime = now();
  buttonCheck();
  if (BPSnooze == Button::ButtonStates::btnPressed) snoozeLightSwitch();
  if (BPSnooze == Button::ButtonStates::btnLongPressed && !snoozeBtn.btnLatchOutput()) {
    snoozeBtn.btnLatch(true);
    Serial.println("LongSnooze");
    snooze();
  }
  if(BPMenu == Button::ButtonStates::btnPressed && !menuMode) {
    menuMode = true;
    timeoutTimer = millis();
    menu();
  }
  printScreen(currentTime);
  sunAlarmCheck(currentTime);
}
//Screen printing handler
void printScreen (time_t t) {
  if (!menuMode) printClock(t);
}
//quick button checker
void buttonCheck(void) {
  snoozeBtn.btnCallBack();
  menuBtn.btnCallBack();
  upBtn.btnCallBack();
  downBtn.btnCallBack();
  enterBtn.btnCallBack();

  BPSnooze = snoozeBtn.btnOutput();
  BPMenu = menuBtn.btnOutput();
  BPUp = upBtn.btnOutput();
  BPDown = downBtn.btnOutput();
  BPEnter = enterBtn.btnOutput();
}
//Clock Screen Function
void printClock(time_t t) {
  char* L1;
  char* L2;
  char* L3;
  if (ampmN24h) {
    makeTimeAMPM(t);
    L1 =  time12;
  } else {
    makeTime24(t);
    L1 = time24;    
  }
  makeDate(t);
  L2 = date;
  if (sunRising) L3 = "Sun is rising!:)";
  else if (sunSetting) L3 = "Sun is setting. ";
  else L3 = "                ";
  u8x8.setFont(u8x8_font_px437wyse700b_2x2_r);
  u8x8.drawString(0, 0, L1);
  u8x8.setFont(u8x8_font_artossans8_r);
  u8x8.drawString(2, 2, L2);
  u8x8.drawString(0, 3, L3);
}
//snooze button function, also functions as light switch when sun is not rising
void snooze() {
  if (sunRising && !snoozing){
    snoozing = true;
    Serial.println();
    Serial.println("Snoozing");
  } else if (sunRising && !snoozing) {
    Serial.println("Already snoozing!");
  } else if (sunSetting && !snoozing) {
    sunTime = 0;
    sunSetting = false;
    snoozing = false;
    writeSunColor();
    Serial.println("Goodnight!");
  } else snoozeLightSwitch();
}
//snooze button function to use long press as a light switch during sunrise or sunset
void snoozeLightSwitch() {
      if (lightOn) {
        switchLEDs(0, 0, 0);
        lightOn = false;
      }
      else if (!lightOn) {
        switchLEDs(redMax, greenMax, blueMax);
        lightOn = true;
      }
    }
//The main settings menu for navigating to different adustments
void menu() {
  u8x8.clearDisplay();
  u8x8.setFont(u8x8_font_px437wyse700b_2x2_r);
  u8x8.drawString(2, 0, "Menu");
  char * L1;
  char menuItems[5][17] = {"   Set Clock    ", "  Sunrise Time  ", " Sunrise Length ", "  Sunset Time   ", " Sunset Length  "};
  while (menuMode){
    L1 = menuItems[menuIndex];
    u8x8.setFont(u8x8_font_artossans8_r);
    u8x8.drawString(0, 3, L1);
    buttonCheck();  
    if(BPUp == Button::ButtonStates::btnPressed) {
      timeoutTimer = millis();
      if(menuIndex >= 4) menuIndex = 0;
      else menuIndex++;
    }
    if(BPDown == Button::ButtonStates::btnPressed) {
      timeoutTimer = millis();
      if(menuIndex <= 0) menuIndex = 4;
      else menuIndex--;
    }
    if (BPEnter == Button::ButtonStates::btnPressed && menuMode) {
      switch (menuIndex) {
        case 0:
          setClockTime();
          break;
        case 1:
          setSunClock(true);
          break;
        case 2:
          setSunLength(true);
          break;
        case 3:
          setSunClock(false);
          break;
        case 4:
        setSunLength(false);
        break;
      }
      menuMode = false;
    }
    if (millis()-timeoutTimer > timeoutTime && menuMode) {
      u8x8.clearDisplay();
      menuMode = false;
      return;
    }  
  }
}
//Sets Clock date and time
void setClockTime(void) {
  u8x8.clearDisplay();
  time_t ct = now();
  tmElements_t tm;
  char * L1;
  char * L2;
  char numVals[5]="";
  int timeDate[6] = {hour(ct), minute(ct), year(ct), month(ct), day(ct), 0};
  int tdLimit[6][2] = {{0,23},{0,59},{2023,10000},{1,12},{1,31},{0,1}};
  if (ampmN24h) timeDate[5] = 1;
  int index = 0;
  const char tn[6][9] = {"Hour:   ","Minute: ","Year:   ","Month:  ","Day:    ","24H/AmPm"};
  const char msn[12][4] = {"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
  const int doms[12] = {31,28,31,30,31,30,31,31,30,31,30,31};
  bool entered = false;
  while (entered == false) {
  //putting in the values for the display with formatting
    L1 = tn[index];
    u8x8.setFont(u8x8_font_px437wyse700b_2x2_r);
    u8x8.drawString(0, 0, L1);
    if (index != 5 && index != 3) {
      if (index == 0 && timeDate[5] == 1) {
        if (timeDate[0]>12) {
          numVals[0] = chMkr((timeDate[0]-12)/10, ' ');
          numVals[1] = chMkr((timeDate[0]-12)%10, '0');
        } else if (timeDate[0] == 0) {
          numVals[0] = '1';
          numVals[1] = '2';
        } else {
          numVals[0] = chMkr((timeDate[0])/10, ' ');
          numVals[1] = chMkr((timeDate[0])%10, '0');      
        }
        if (timeDate[0] < 12) numVals[2] = 'a';
        else numVals[2] = 'p';   
        numVals[3] = 'm';
      } else { 
      numVals[0] = chMkr(timeDate[index]/1000,' ');
      if (index == 2) numVals[1] = chMkr((timeDate[index]%1000)/100, '0');
      else numVals[1] = ' ';
      if (index == 2) numVals[2] = chMkr((timeDate[index]%100)/10, '0');
      else numVals[2] = chMkr((timeDate[index]%100)/10, ' ');
      numVals[3] = chMkr((timeDate[index]%10), '0');
      }
      L2 = numVals;
      u8x8.drawString(4,2, L2);
    } else if (index == 3) {
      L2 = msn[timeDate[3]-1];
      u8x8.drawString(5,2, L2);
    } else {
      if (timeDate[5] == 0) L2 = "24h Time";
      else L2 = "12h Time";
      u8x8.drawString(0,2, L2);
    }
    //leap year and calendar month controls
    if (timeDate[2]%4 == 0) tdLimit[4][1] = 28;
    else tdLimit[4][1] = doms[timeDate[3]];
    buttonCheck();
    //menu button should go back
    if (BPMenu == Button::ButtonStates::btnPressed) {
      u8x8.clearDisplay();
      timeoutTimer = millis();
      return;
    }
    //enter button iterates to the next L2 to change
    if (BPEnter == Button::ButtonStates::btnPressed) {
      timeoutTimer = millis();
      if (index == 5) index = 0;
      else index++;
      u8x8.clearDisplay();
    }
    //long press on enter will save all currently stored values
    if (BPEnter == Button::ButtonStates::btnLongPressed) {
        tm.Year = timeDate[2]-1970;
        tm.Month = timeDate[3];
        tm.Day = timeDate[4];
        tm.Hour = timeDate[0];
        tm.Minute = timeDate[1];
        tm.Second = 0;
        ct = makeTime(tm);
        myRTC.set(ct);
        setTime(ct);
        if (timeDate[5] == 0) ampmN24h = false;
        else ampmN24h = true;
        menuMode = false;
        entered = true;
        return;
    }
    if (BPUp == Button::ButtonStates::btnPressed || BPUp == Button::ButtonStates::btnLongPressed) {
      timeoutTimer = millis();
      if(timeDate[index] >= tdLimit[index][1]) timeDate[index] = tdLimit[index][0];
      else timeDate[index] ++;

    }
    if (BPDown == Button::ButtonStates::btnPressed || BPDown == Button::ButtonStates::btnLongPressed) {
      timeoutTimer = millis();
      if(timeDate[index] <= tdLimit[index][0]) timeDate[index] = tdLimit[index][1];
      else timeDate[index] --;
    }
    if (millis()-timeoutTimer > timeoutTime) {
      u8x8.clearDisplay();
      menuMode = false;
      entered  = true;
      return;
    }
  }
}
//Sets sunset and sunrise times (pass true for sunrise, false for sunset)
void setSunClock(bool riseNotSet) {
  char * L1;
  char * L2;
  char * L3;
  bool entered = false;
  bool hNM = true;
  int nSH = 0;
  int nSM = 0;
  if (riseNotSet) {
    nSH = sunriseHour;
    EEPROM.update(1, sunriseHour);
    nSM = sunriseMinute;
    EEPROM.update(2, sunriseMinute);
    L1 = "    Sunrise     ";
  }
  else {
    nSH = sunsetHour;
    EEPROM.update(4, sunsetHour);
    nSM = sunsetMinute;
    EEPROM.update(5, sunsetMinute);
    L1 = "    Sunset      ";
  }
  L2 = "will be set to: ";
  u8x8.clearDisplay();
  while (entered == false) {
    if (ampmN24h) {
      makeTimeAMPM(nSH, nSM);
      if ((millis()/500)%2 == 0) {
        if (hNM) {
          time12[0] = ' ';
          time12[1] = ' ';
        } else {
          time12[3] = ' ';
          time12[4] = ' ';
        }
      }
      L3 = time12;
    } else {
      makeTime24(nSH, nSM);
      if ((millis()/500)%2 == 0) {
        if (hNM) {
          time24[0] = ' ';
          time24[1] = ' ';
        } else {
          time24[3] = ' ';
          time24[4] = ' ';
        }
      }
      L3 = time24;
    }
    u8x8.setFont(u8x8_font_artossans8_r);
    u8x8.drawString(0,0, L1);
    u8x8.drawString(0,1, L2);
    u8x8.setFont(u8x8_font_px437wyse700b_2x2_r);
    u8x8.drawString(0, 2, L3);

    buttonCheck();
    if (BPMenu == Button::ButtonStates::btnPressed) {
      u8x8.clearDisplay();
      timeoutTimer = millis();
      return;
    }
    if (BPEnter == Button::ButtonStates::btnPressed) {
      timeoutTimer = millis();
      if (hNM) hNM = false;
      else hNM = true;
    }
    if (BPEnter == Button::ButtonStates::btnLongPressed) {
        if (riseNotSet) {
          sunriseHour = nSH;
          sunriseMinute = nSM;
        } else {
          sunsetHour = nSH;
          sunsetMinute = nSM;      
        }
        L2 = "    set to:     ";
        if (ampmN24h) {
          makeTimeAMPM(nSH, nSM);
          L3 = time12;
        } else {
          makeTime24(nSH, nSM);
          L3 = time24;
        }
        u8x8.setFont(u8x8_font_artossans8_r);
        u8x8.drawString(0,0, L1);
        u8x8.drawString(0,1, L2);
        u8x8.setFont(u8x8_font_px437wyse700b_2x2_r);
        u8x8.drawString(0, 2, L3);
        delay(1200);
        u8x8.clearDisplay();
        menuMode = false;
        entered = true;
        return;
    }
    if (BPUp == Button::ButtonStates::btnPressed || BPUp == Button::ButtonStates::btnLongPressed) {
      timeoutTimer = millis();
      if (hNM){
        if (nSH >= 23) nSH = 0;
        else nSH++; 
      } else {
        if (nSM >= 59) nSM = 0;
        else nSM++;          
      }
    }
    if (BPDown == Button::ButtonStates::btnPressed || BPDown == Button::ButtonStates::btnLongPressed) {
      timeoutTimer = millis();
      if (hNM){
        if (nSH <= 0) nSH = 23;
        else nSH--; 
      } else {
        if (nSM <= 0) nSM = 59;
        else nSM--;          
      }
    }
    if (millis()-timeoutTimer>timeoutTime) {
      u8x8.clearDisplay();
      menuMode = false;
      entered = true;
    }
  }
}
//set sunrise or sunset length, to maximum of 120 minutes
//has a boolean to test for error message type
void setSunLength(bool riseNotSet) {
  char * L1;
  char * L2;
  char * L3;
  char nSL[4] = "";  
  timeoutTimer = millis();
  bool entered = false;
  int newSunLength;
  if (riseNotSet) {
    newSunLength = sunriseLength;
    L1 = "  Sunrise time  ";
  }
  else {
    newSunLength = sunsetLength;
    L1 = "  Sunset time   ";
  }
  L2 = "  in minutes:   ";
  u8x8.clearDisplay();
  while (entered == false) {
    nSL[0] = chMkr(newSunLength/100, ' ');
    if (newSunLength>99) nSL[1] = chMkr((newSunLength%100)/10, '0');
    else nSL[1] = chMkr((newSunLength%100)/10, ' ');
    nSL[2] = chMkr(newSunLength%10, '0');
    if (newSunLength == 0) L3 = "Off";
    else if (newSunLength ==120) L3 = "Max";
    else L3 = nSL;
    u8x8.setFont(u8x8_font_artossans8_r);
    u8x8.drawString(0,0, L1);
    u8x8.drawString(0,1, L2);
    u8x8.setFont(u8x8_font_px437wyse700b_2x2_r);
    u8x8.drawString(3, 2, L3);  
    buttonCheck();
    if (BPMenu == Button::ButtonStates::btnPressed) {
      timeoutTimer = millis();
      u8x8.clearDisplay();
      return;
    }
    if (BPEnter == Button::ButtonStates::btnPressed || BPEnter == Button::ButtonStates::btnLongPressed) {
      if (riseNotSet) {
        sunriseLength = newSunLength;
        EEPROM.update(3, sunriseLength);
        L1 = " Sunrise Length ";
      }
      else if (!riseNotSet) {
        sunsetLength = newSunLength;
        EEPROM.update(6, sunsetLength);
        L1 = " Sunset Length  ";
      }
      L2 = "     set to:    ";
      u8x8.setFont(u8x8_font_artossans8_r);
      u8x8.drawString(0,0, L1);
      u8x8.drawString(0,1, L2);
      u8x8.setFont(u8x8_font_px437wyse700b_2x2_r);
      u8x8.drawString(3, 2, L3); 
      delay(1200);      
      u8x8.clearDisplay();      
      menuMode = false;
      entered = true;
      return;
    }
    if (newSunLength < 120) {
      if (BPUp == Button::ButtonStates::btnLongPressed || BPUp == Button::ButtonStates::btnPressed) {
        timeoutTimer = millis();
        newSunLength++;
      }
    }
    if (newSunLength > 0) {
      if  (BPDown == Button::ButtonStates::btnLongPressed || BPDown == Button::ButtonStates::btnPressed) {
        timeoutTimer = millis();
        newSunLength--;
      }
    } 
    if (millis()-timeoutTimer>timeoutTime) {
      u8x8.clearDisplay();      
      menuMode = false;
      entered = true;
      return;
    }
  }
}
//checks current hour and minute against setpoints to decide if a sunrise or sunset needs to be started
//adjusts for sunset and sunrise lengths
void sunAlarmCheck(time_t ct) {
  int tNow = (hour(ct)*60+minute(ct));
  int sRT = (sunriseHour*60+sunriseMinute-sunriseLength);
  int sST = (sunsetHour*60+sunsetMinute-sunriseLength);
  if (tNow == sRT && !sunRising && !lightOn && sunriseLength > 0) {
    sunMilliTimer = millis();
    sunRising = true;
    sunSetting = false;
    sunTime = 0;
  } else if (tNow == sST && !sunSetting && lightOn) {
    sunMilliTimer = millis();
    sunSetting = true;
    sunRising = false;
    sunTime = sunMax;
    lightOn = false;
  }
  
  if(sunRising && !lightOn && sunsetLength > 0) {
    long sTR = long(sunriseLength*60000)+sunMilliTimer-millis();   
    sunrise(sTR);
  }
  if(sunSetting && !lightOn) {
    long sTR = long(sunsetLength*60000)+sunMilliTimer-millis();
    sunset(sTR);
  }
}
//Color calculations based on formulas that are calibrated to a sunTime L2 of 155 maximum
//the -45 shifts the function to start the red curve at 0
//red is the dimmest color led, so it needs maximum final brightness
int colorCalcRed(float sunTime) {
  double x = sunTime;
  double mx = redMax;
  x = (sunTime-45);
  double C = mx-mx/(1+pow(1.15, x));
  int redVal = C;
  return max(0,redVal);
} 
//Color calculation for green. Needs to happen later than red. 
//The -80 will determine how much later after sunrise start.
//this will start turning the light orange (depends on greenMax)
int colorCalcGreen(float sunTime) {
  double x = sunTime;
  double mx = greenMax;
  x = (sunTime-80);
  double C = mx-mx/(1+pow(1.15, x));
  int greenVal = C;
  return max(0,greenVal);
}
//Color calculation for blue. Needs to happen later than green. 
//The -90 will determine how much later after sunrise start.
//this will start turning the light white (depends on blueMax)
int colorCalcBlue(float sunTime) {
  double x = sunTime;
  double mx = blueMax;
  x = (sunTime-90);
  double C = mx-mx/(1+pow(1.15, x));
  int blueVal = C;
  return max(0,blueVal);
}
//Writes the RGB values for sun color.
void writeSunColor() {
  int R = colorCalcRed(sunTime);
  int G = colorCalcGreen(sunTime);
  int B = colorCalcBlue(sunTime);
  switchLEDs(R, G, B);
}
//Simple LED output Writer
void switchLEDs (int R, int G, int B) {
  analogWrite(LEDRed, R);
  analogWrite(LEDGreen, G);
  analogWrite(LEDBlue, B);
} 
//checks for to make sure the sun is rising when it should be, and calculates the sun height
void sunrise(long sTR) {
  if(sunRising == true && lightOn == false) {
    if (sunTime<sunMax) {
      writeSunColor();
      if (snoozing) sunTime = float(sunMax)*(1.00-(float(sTR+10)/60000)/float(sunriseLength)); 
      else sunTime = float(sunMax)*(1-(float(sTR)/60000)/float(sunriseLength));
    } else {
      sunRising = false;
      snoozing = false;
      lightOn = true;
    }
  }
}
//checks to make sure the sun is setting when it should be and calculates the sun height
void sunset(long sTR) {
  if(sunSetting == true && lightOn == false) {
    if(sunTime>0) {
      writeSunColor();
      sunTime = float(sunMax)*((float(sTR)/60000)/float(sunsetLength));
    } else {
      sunSetting = false;
      lightOn = false;
    }
  }
}
void timeInit() {
  time_t t;
  tmElements_t tm;
  char CDate[12] = __DATE__;
  char CTime[8] = __TIME__;
  char CMo[4] = {CDate[0],CDate[1],CDate[2],'\0'};
  char msn[12][4] = {"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
  for (int i=0; i<12; i++) {
    if ( strcmp(msn[i], CMo) == 0) {
        tm.Month = (i+1);
      }
    }
  tm.Hour = 10*(CTime[0]-'0')+(CTime[1]-'0');
  tm.Minute = 10*(CTime[3]-'0')+(CTime[4]-'0');
  tm.Second = 10*(CTime[6]- '0')+(CTime[7]-'0');
  tm.Year = 10*(CDate[9]-'0')+30+(CDate[10]-'0');
  tm.Day = 10*(CDate[4]-'0')+(CDate[5]-'0');
  t = makeTime(tm);
  myRTC.set(t);
  setTime(t);
  Serial.print("RTC set to: ");
  printDateTime(t, true);
  Serial.println();
}
// print date and time
void printDateTime(time_t t, bool ampm) {
  makeDate(t);
  Serial.print(date);
  Serial.print(" ");
  if (!ampm) {
    makeTime24(t);
    Serial.println(time24);
  } else {
    makeTimeAMPM(hour(t), minute(t));
    Serial.println(time12);      
  }
}
// AM/PM time formatter for time_t objects. blinks the ':' every second
void makeTimeAMPM(time_t t) {
  int h = hour(t);
  int m = minute(t);
  makeTimeAMPM(h, m);
  if (second(t)%2 == 0) time12[2] = ' ';
}
// AM/PM time formatter for hour and minute ints
void makeTimeAMPM(int h, int m) {
  if (h>12) {
    time12[0] = chMkr((h-12)/10, ' ');
    time12[1] = chMkr((h-12)%10, '0');
  } else if (h == 0) {
    time12[0] = '1';
    time12[1] = '2';
  } else {
    time12[0] = chMkr(h/10, ' ');
    time12[1] = chMkr(h%10, '0');      
  }
  time12[2] = ':';
  time12[3] = chMkr(m/10, '0');
  time12[4] = chMkr(m%10, '0');
  if (h<11) time12[5] = 'a';
  else time12[5] = 'p';
  time12[6] = 'm';
}
// 24 Hour time formatter. blinks  the ':' every second
void makeTime24(time_t t) {
  makeTime24(hour(t), minute(t));
  if (second(t)%2 == 0) time24[2] = ' '; 
}
//24 Hour time formatter for hour and minute ints
void makeTime24(int h, int m) {
  time24[0] = chMkr(h/10, ' ');
  time24[1] = chMkr(h%10, '0');
  time24[2] = ':';
  time24[3] = chMkr(m/10, '0');
  time24[4] = chMkr(m%10, '0');
}
// Date formatter
void makeDate(time_t t) {
  date[0] = chMkr(day(t)/10, ' ');
  date[1] = chMkr(day(t)%10, '0');
  date[2] = ' ';
  char msn[12][4] = {"Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"};
  date[3] = msn[month(t)-1][0];
  date[4] = msn[month(t)-1][1];
  date[5] = msn[month(t)-1][2];
  date[6] = ' ';
  date[7] = chMkr(year(t)/1000, '0');
  date[8] = chMkr((year(t)%1000)/100, '0');
  date[9] = chMkr((year(t)%100)/10, '0');
  date[10] = chMkr(year(t)%10, '0');
}
//for turning single digits into chars because arduino. filler for when 0 is not desired
char chMkr(int x, char fill) {
  switch (x) {
  case 0:
    return fill;
    break;
  case 1:
    return '1';
    break;
  case 2:
    return '2';
    break;
  case 3:
    return '3';
    break;
  case 4:
    return '4';
    break;
  case 5:
    return '5';
    break;
  case 6:
    return '6';
    break; 
  case 7:
    return '7';
    break;
  case 8:
    return '8';
    break;
  case 9:
    return '9';
    break;     
  }
}
